- case: test_shin_stub
  main: |
    from shin import shin
    
    reveal_type(shin.optimise)
  out: |
    main:3: note: Revealed type is "def (inverse_odds: builtins.list[builtins.float], sum_inverse_odds: builtins.float, n: builtins.int, max_iterations: builtins.int =, convergence_threshold: builtins.float =) -> tuple[builtins.float, builtins.float, builtins.float]"

- case: test_sequence_input_overload
  main: |
    import shin
    
    reveal_type(shin.calculate_implied_probabilities([3.0, 3.0, 3.0]))
  out: |
    main:3: note: Revealed type is "builtins.list[builtins.float]"

- case: test_mapping_input_overload
  main: |
    import shin
      
    reveal_type(shin.calculate_implied_probabilities({1: 3.0, 2: 3.0, 3: 3.0}))
  out: |
      main:3: note: Revealed type is "builtins.dict[builtins.int, builtins.float]"

- case: test_sequence_input_full_output_overload
  main: |
      import shin
      
      reveal_type(shin.calculate_implied_probabilities([3.0, 3.0, 3.0], full_output=True))
  out: |
      main:3: note: Revealed type is "shin.FullOutput[builtins.list[builtins.float]]"

- case: test_mapping_input_full_output_overload
  main: |
      import shin
      
      reveal_type(shin.calculate_implied_probabilities({1: 3.0, 2: 3.0, 3: 3.0}, full_output=True))
  out: |
      main:3: note: Revealed type is "shin.FullOutput[builtins.dict[builtins.int, builtins.float]]"
